# stages:  
#   - execute-script


# variables:
#   GIT_STRATEGY: clone

# # Job pour les événements "issue"
# execute-python-on-issue-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     # - if: '$CI_PIPELINE_SOURCE == "issue" && $CI_COMMIT_REF_NAME == "main"'
#     - if: '$CI_PIPELINE_SOURCE == "web"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger"'


# # Job pour les événements "merge_request"
# execute-python-on-pr-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger"' 
 


stages:  
  - execute-script

variables:
  GIT_STRATEGY: clone

# Debug job to print variables
debug-variables:
  stage: execute-script
  script:
    - echo CI_PIPELINE_SOURCE: "$CI_PIPELINE_SOURCE"
  rules:
    - when: always

# Job for "issue" events
execute-python-on-issue-update:
  stage: execute-script
  script:
    - python3 /home/gitlab-runner/scripts-secures/script_issue.py
  rules:
    - if: '$CI_PIPELINE_SOURCE == "issue"'

# Job for "merge_request" events
execute-python-on-pr-update:
  stage: execute-script
  script:
    - python3 /home/gitlab-runner/scripts-secures/script_pr.py
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request"'

# Fallback job to prevent empty pipeline
fallback-job:
  stage: execute-script
  script:
    - echo "No specific job matched the pipeline source."
  rules:
    - when: always