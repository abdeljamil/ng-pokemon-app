# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# stages:          # List of stages for jobs, and their order of execution
#   - execute-script
#   - build
#   - test
#   - deploy

# variables:
#   GIT_STRATEGY: clone

# # Job pour les √©v√©nements "issue"
# execute-python-on-issue-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     # - if: '$CI_PIPELINE_SOURCE == "issue" && $CI_COMMIT_REF_NAME == "main"'
#     - if: '$CI_PIPELINE_SOURCE == "web"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger"' 

# # Job pour les √©v√©nements "merge_request"
# execute-python-on-pr-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger"' 

# # Job de d√©bogage pour v√©rifier le contexte du pipeline
# debug_pipeline:
#   stage: execute-script
#   script:
#     - echo "CI_PIPELINE_SOURCE $CI_PIPELINE_SOURCE"
#     - echo "CI_COMMIT_REF_NAME $CI_COMMIT_REF_NAME"
#     - echo "CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "trigger"' # S'ex√©cute pour les pipelines d√©clench√©s manuellement ou via un webhook


# build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - echo "Compile complete."

# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."











# stages:          # List of stages for jobs, and their order of execution
#   - execute-script
#   - build
#   - test
#   - deploy

# variables:
#   GIT_STRATEGY: clone

# # Job pour les √©v√©nements "issue"
# execute-python-on-issue-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     # - if: '$CI_PIPELINE_SOURCE == "issue" && $CI_COMMIT_REF_NAME == "main"'
#     - if: '$CI_PIPELINE_SOURCE == "web"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger"' 

# # Job pour les √©v√©nements "merge_request"
# execute-python-on-pr-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger"' 

# # # Job de d√©bogage pour v√©rifier le contexte du pipeline
# # debug_pipeline:
# #   stage: execute-script
# #   script:
# #     - echo "CI_PIPELINE_SOURCE $CI_PIPELINE_SOURCE"
# #     - echo "CI_COMMIT_REF_NAME $CI_COMMIT_REF_NAME"
# #     - echo "CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
# #   rules:
# #     - if: '$CI_PIPELINE_SOURCE == "trigger"' # S'ex√©cute pour les pipelines d√©clench√©s manuellement ou via un webhook


# build-job:       # This job runs in the build stage, which runs first.
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - echo "Compile complete."

# unit-test-job:   # This job runs in the test stage.
#   stage: test    # It only starts when the job in the build stage completes successfully.
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:   # This job also runs in the test stage.
#   stage: test    # It can run at the same time as unit-test-job (in parallel).
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."


stages:
  # - execute-script
  - build
  - test
  - deploy

variables:
  GIT_STRATEGY: clone

# workflow:
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "issue"'
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#     - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == "main"'
#     - when: never  # Ignore tous les autres d√©clencheurs

# # Job pour les √©v√©nements "issue"
# execute-python-on-issue-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "issue"'
#   interruptible: true

# # Job pour les √©v√©nements "merge_request"
# execute-python-on-pr-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#   interruptible: true

# # Job de d√©bogage pour v√©rifier le contexte du pipeline
# debug_pipeline:
#   stage: execute-script
#   script:
#     - echo "CI_PIPELINE_SOURCE $CI_PIPELINE_SOURCE"
#     - echo "CI_COMMIT_REF_NAME $CI_COMMIT_REF_NAME"
#     - echo "CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "trigger"'
#   interruptible: true

build-job:
  stage: build
  script:
    - python3 /home/gitlab-runner/scripts-secures/script_issue.py
    - python3 /home/gitlab-runner/scripts-secures/script_pr.py
  interruptible: true
  
  script:
    - echo "Compiling the code..."
    - echo "Compile complete."

unit-test-job:
  stage: test
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - sleep 60
    - echo "Code coverage is 90%"
  interruptible: true

lint-test-job:
  stage: test
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."
  interruptible: true

deploy-job:
  stage: deploy
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."
  interruptible: false  # Ne pas annuler ce job (important pour la production)











# stages:
#   - execute-script
#   - build
#   - test
#   - deploy

# variables:
#   GIT_STRATEGY: clone

# # Job pour les √©v√©nements "issue" (cr√©ation/modification)
# execute-python-on-issue-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "issue"'  # üî• Seulement pour les issues

# # Job pour les √©v√©nements "merge request" (cr√©ation/modification)
# execute-python-on-pr-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'  # üî• Seulement pour les MRs

# # Job de d√©bogage am√©lior√©
# debug_pipeline:
#   stage: execute-script
#   script:
#     - echo "=== DEBUG ==="
#     - echo "CI_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE"
#     - echo "CI_COMMIT_REF_NAME: $CI_COMMIT_REF_NAME"
#     - env | grep CI_  # Affiche toutes les variables CI
#   rules:
#     - if: $CI_PIPELINE_SOURCE  # S'ex√©cute pour TOUS les √©v√©nements

# # Jobs suivants inchang√©s
# build-job:
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - echo "Compile complete."

# unit-test-job:
#   stage: test
#   script:
#     - echo "Running unit tests..."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:
#   stage: test
#   script:
#     - echo "Linting code..."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:
#   stage: deploy
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."









# stages:
#   - execute-script
#   - build
#   - test
#   - deploy

# variables:
#   GIT_STRATEGY: clone

# execute-python-on-issue-update:
#   stage: execute-script
#   script:
#     - if [ "$RUN_SCRIPT" == "true" ]; then python3 /home/gitlab-runner/scripts-secures/script_issue.py; fi
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "issue" && ($CI_COMMIT_REF_NAME == "main" || $CI_COMMIT_REF_NAME == "master")'
#     - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == "main"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger"'

# execute-python-on-pr-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger"'

# debug_pipeline:
#   stage: execute-script
#   script:
#     - echo "CI_PIPELINE_SOURCE $CI_PIPELINE_SOURCE"
#     - echo "CI_COMMIT_REF_NAME $CI_COMMIT_REF_NAME"
#     - echo "CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "trigger"'

# build-job:
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - echo "Compile complete."

# unit-test-job:
#   stage: test
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:
#   stage: test
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:
#   stage: deploy
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."












# stages:
#   - execute-script
#   - build
#   - test
#   - deploy

# variables:
#   GIT_STRATEGY: clone

# # Job pour synchroniser les issues
# execute-python-on-issue-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "trigger"'  # S'ex√©cute uniquement pour les pipelines d√©clench√©s manuellement ou via un webhook

# # Job pour synchroniser les merge requests
# execute-python-on-pr-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "trigger"'  # S'ex√©cute pour les √©v√©nements de merge request

# # Job de d√©bogage pour v√©rifier le contexte du pipeline
# debug_pipeline:
#   stage: execute-script
#   script:
#     - echo "CI_PIPELINE_SOURCE $CI_PIPELINE_SOURCE"
#     - echo "CI_COMMIT_REF_NAME $CI_COMMIT_REF_NAME"
#     - echo "CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "trigger"'  # S'ex√©cute pour les pipelines d√©clench√©s manuellement ou via un webhook

# # Jobs de build, test et deploy
# build-job:
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - echo "Compile complete."

# unit-test-job:
#   stage: test
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:
#   stage: test
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:
#   stage: deploy
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."


















# stages:
#   - execute-script

# variables:
#   GIT_STRATEGY: clone

# # Job pour les √©v√©nements "issue"
# execute-python-on-issue-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "issue"'  # Ex√©cution uniquement pour les √©v√©nements "issue"

# # Job pour les √©v√©nements "merge_request"
# execute-python-on-pr-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request"'  # Ex√©cution uniquement pour les √©v√©nements "merge_request"










# stages:
#   - build
#   - test
#   - deploy
#   - execute-script

# variables:
#   GIT_STRATEGY: clone

# # Jobs pour le pipeline de base (build, test, deploy)
# build-job:
#   stage: build
#   script:
#     - echo "Compiling the code..."
#     - echo "Compile complete."

# unit-test-job:
#   stage: test
#   script:
#     - echo "Running unit tests... This will take about 60 seconds."
#     - sleep 60
#     - echo "Code coverage is 90%"

# lint-test-job:
#   stage: test
#   script:
#     - echo "Linting code... This will take about 10 seconds."
#     - sleep 10
#     - echo "No lint issues found."

# deploy-job:
#   stage: deploy
#   environment: production
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."

# # Jobs pour les √©v√©nements webhooks (issues et merge requests)
# execute_python_on_issue_update:
#   stage: execute-script
#   script:
#     - timeout 600 python3 /home/gitlab-runner/scripts-secures/script_issue.py  # Limite √† 10 minutes (600 secondes)
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "issue" && $CI_COMMIT_REF_NAME == "main"'
#   timeout: 10 minutes
#   after_script:
#     - echo "Cleaning up after script_issue.py"

# execute_python_on_pr_update:
#   stage: execute-script
#   script:
#     - timeout 600 python3 /home/gitlab-runner/scripts-secures/script_pr.py  # Limite √† 10 minutes (600 secondes)
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'
#   timeout: 10 minutes
#   after_script:
#     - echo "Cleaning up after script_pr.py"

# # Job de d√©bogage pour v√©rifier le contexte du pipeline
# debug_pipeline:
#   stage: execute-script
#   script:
#     - echo "CI_PIPELINE_SOURCE $CI_PIPELINE_SOURCE"
#     - echo "CI_COMMIT_REF_NAME $CI_COMMIT_REF_NAME"
#     - echo "CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "trigger"'  # S'ex√©cute pour les pipelines d√©clench√©s manuellement ou via un webhook






# stages:
#   - execute-script

# variables:
#   GIT_STRATEGY: clone

# # Job pour les √©v√©nements "issue"
# execute_python_on_issue_update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "issue" && $CI_COMMIT_REF_NAME == "main"'

# # Job pour les √©v√©nements "merge_request"
# execute_python_on_pr_update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'

# # Job de d√©bogage pour v√©rifier le contexte du pipeline
# debug_pipeline:
#   stage: execute-script
#   script:
#     - echo "CI_PIPELINE_SOURCE $CI_PIPELINE_SOURCE"
#     - echo "CI_COMMIT_REF_NAME $CI_COMMIT_REF_NAME"
#     - echo "CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "trigger"' # S'ex√©cute pour les pipelines d√©clench√©s manuellement ou via un webhook




# stages:
#   - execute-script

# variables:
#   GIT_STRATEGY: clone

# # Job pour les √©v√©nements "issue"
# execute-python-on-issue-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "trigger"'

# # Job pour les √©v√©nements "merge_request"
# execute-python-on-pr-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "trigger"'


# stages:
#   - execute-script

# variables:
#   GIT_STRATEGY: clone

# # Job pour synchroniser les issues
# execute-python-on-issue-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $EVENT_TYPE == "issue"'
#       when: always

# # Job pour synchroniser les PRs
# execute-python-on-pr-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $EVENT_TYPE == "merge_request"'
#       when: always

# # Job pour synchroniser les commentaires
# execute-python-on-comment-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_comment.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $EVENT_TYPE == "note"'
#       when: always


