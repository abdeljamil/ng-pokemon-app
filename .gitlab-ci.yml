# stages:          # List of stages for jobs, and their order of execution
#   - execute-script


# variables:
#   GIT_STRATEGY: clone

# # Job pour les événements "issue"
# execute-python-on-issue-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "issue" && $CI_COMMIT_REF_NAME == "main"'
#     - if: '$CI_PIPELINE_SOURCE == "web"'
#     # - if: '$CI_PIPELINE_SOURCE == "trigger"' 

# # Job pour les événements "merge_request"
# execute-python-on-pr-update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web"'
#     # - if: '$CI_PIPELINE_SOURCE == "trigger"' 



stages:
  - execute-script

variables:
  GIT_STRATEGY: clone

# Job pour les événements "issue"
execute-python-on-issue-update:
  stage: execute-script
  script:
    - python3 /home/gitlab-runner/scripts-secures/script_issue.py
  rules:
    - if: '$CI_PIPELINE_SOURCE == "issue" && $CI_COMMIT_REF_NAME == "main"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - when: always  # Permet d'éviter un pipeline vide

# Job pour les événements "merge_request"
execute-python-on-pr-update:
  stage: execute-script
  script:
    - python3 /home/gitlab-runner/scripts-secures/script_pr.py
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "web"'
    - when: always  # Permet d'éviter un pipeline vide

# Job de debug pour afficher les variables CI/CD
debug-pipeline:
  stage: execute-script
  script:
    - echo "CI_PIPELINE_SOURCE: $CI_PIPELINE_SOURCE"
    - echo "CI_COMMIT_REF_NAME: $CI_COMMIT_REF_NAME"
  rules:
    - when: always
