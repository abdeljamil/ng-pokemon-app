# stages:
#   - execute-script

# variables:
#   GIT_STRATEGY: clone

# execute_python_on_issue_update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web"'

    
# execute_python_on_pr_update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web"'


# execute_python_on_issue_update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $TRIGGERED != "true"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGERED != "true"'

# execute_python_on_pr_update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $TRIGGERED != "true"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGERED != "true"'

# stages:
#   - execute-script  # Déclarez explicitement le stage "execute-script"

# execute_python_on_issue_update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $TRIGGERED != "true"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGERED != "true"'

# execute_python_on_pr_update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $TRIGGERED != "true"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGERED != "true"'


# variables:
#   GIT_STRATEGY: clone  # Clone le dépôt à chaque job

# stages:
#   - execute-script

# execute_python_on_issue_update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $TRIGGERED != "true"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGERED != "true"'

# execute_python_on_pr_update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $TRIGGERED != "true"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGERED != "true"'


# variables:
#   GIT_STRATEGY: clone  # Clone le dépôt à chaque job

# workflow:  # ⚠️ Règle globale pour bloquer les pipelines récursifs
#   rules:
#     - if: '$TRIGGERED == "true"'
#       when: never  # Annule le pipeline si TRIGGERED=true
#     - when: always  # Sinon, exécute le pipeline

# stages:
#   - execute-script

# execute_python_on_issue_update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $TRIGGERED != "true"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGERED != "true"'

# execute_python_on_pr_update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $TRIGGERED != "true"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGERED != "true"'





# variables:
#   GIT_STRATEGY: clone

# workflow:
#   rules:
#     - if: '$TRIGGERED == "true"'
#       when: never
#     - when: always

# stages:
#   - execute-script

# execute_python_on_issue_update:
#   stage: execute-script
#   script:
#     - export TRIGGERED="true"  # Définir TRIGGERED avant d'exécuter le script
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $TRIGGERED != "true"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGERED != "true"'

# execute_python_on_pr_update:
#   stage: execute-script
#   script:
#     - export TRIGGERED="true"  # Définir TRIGGERED avant d'exécuter le script
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $TRIGGERED != "true"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGERED != "true"'


# variables:
#   GIT_STRATEGY: clone

# workflow:
#   rules:
#     - if: '$TRIGGERED == "true"'
#       when: never
#     - when: always

# stages:
#   - execute-script

# execute_python_on_issue_update:
#   stage: execute-script
#   script:
#     - export TRIGGERED="true"
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $TRIGGERED != "true" && $CI_COMMIT_REF_NAME == "main"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGERED != "true"'

# execute_python_on_pr_update:
#   stage: execute-script
#   script:
#     - export TRIGGERED="true"
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $TRIGGERED != "true" && $CI_COMMIT_REF_NAME == "main"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGERED != "true"'


# variables:
#   GIT_STRATEGY: clone
#   TRIGGERED: "false"  # Valeur par défaut

# workflow:
#   rules:
#     - if: '$TRIGGERED == "true"'
#       when: never
#     - when: always

# stages:
#   - execute-script

# execute_python_on_issue_update:
#   stage: execute-script
#   script:
#     - echo "Début de l'exécution du script pour la mise à jour des issues"
#     - export TRIGGERED="true"  # Définir TRIGGERED avant d'exécuter le script
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $TRIGGERED != "true"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGERED != "true"'

# execute_python_on_pr_update:
#   stage: execute-script
#   script:
#     - echo "Début de l'exécution du script pour la mise à jour des PR"
#     - export TRIGGERED="true"  # Définir TRIGGERED avant d'exécuter le script
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web" && $TRIGGERED != "true"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger" && $TRIGGERED != "true"'




# stages:
#   - execute-script

# variables:
#   GIT_STRATEGY: clone

# execute_python_on_issue_update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger"'
#     - if: '$CI_COMMIT_BRANCH == "main"'  # Exemple de condition pour une branche spécifique
    
# execute_python_on_pr_update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web"'
#     - if: '$CI_PIPELINE_SOURCE == "trigger"'
#     - if: '$CI_COMMIT_BRANCH == "main"'  # Exemple de condition pour une branche spécifique



# stages:
#   - execute-script

# variables:
#   GIT_STRATEGY: clone

# debug_job:
#   stage: execute-script
#   script:
#     - echo Pipeline Source: $CI_PIPELINE_SOURCE

# execute_python_on_issue_update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_issue.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web"'

# execute_python_on_pr_update:
#   stage: execute-script
#   script:
#     - python3 /home/gitlab-runner/scripts-secures/script_pr.py
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "web"'





stages:
  - execute-script

variables:
  GIT_STRATEGY: clone

# Job pour exécuter le script lors de la mise à jour d'une issue
execute_python_on_issue_update:
  stage: execute-script
  script:
    - timeout 600 python3 /home/gitlab-runner/scripts-secures/script_issue.py  # Limite à 10 minutes (600 secondes)
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == "main"'  # Exécuter uniquement pour les événements web sur la branche main
  timeout: 10 minutes  # Limite la durée du job à 10 minutes
  after_script:
    - echo "Cleaning up after script_issue.py"  # Nettoyage après exécution

# Job pour exécuter le script lors de la mise à jour d'une pull request
execute_python_on_pr_update:
  stage: execute-script
  script:
    - timeout 600 python3 /home/gitlab-runner/scripts-secures/script_pr.py  # Limite à 10 minutes (600 secondes)
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web" && $CI_MERGE_REQUEST_ID'  # Exécuter uniquement pour les événements web liés aux merge requests
  timeout: 10 minutes  # Limite la durée du job à 10 minutes
  after_script:
    - echo "Cleaning up after script_pr.py"  # Nettoyage après exécution